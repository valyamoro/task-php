из tasks.my - 30_09_2023 - 30.09.2023.php:

1) Функция для соединения с БД: connectionDB();
Используется для установления соединения с базой данных с помощью PDO
	1.1) static $dbh = null - Объявление статической переменной $dbh. Гарантирует что
	эта переменная будет создана только один раз и будет сохранять свое значение между вызовами функций.
	Объявление этой переменной как статически, позволяет избежать повторого создания объекта PDO. 
	Это важно, т.к повторное установления соединение может быть дорогостоящей операцией.

	1.2) if (!\is_null($dbh)) - Если уже существует соединение с бд, то она вернет PDO объект с настройками.
	
	1.3) try {...} catch {...} - Внутри блока try происходит создание и настройка объекта PDO, для соединения с БД.
	a) Передаваемые параметры определяют источник данных, хост, имя бд. Имя пользователя и пароль.
	b) Далее передается массив опций. В массиве устанавливаются различные атрибуты для объекта PDO.
	Эти атрибуты включают:
		PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION;	
		Устанавливает режим обработки ошибок. В этом режиме PDO будет выбрасывать исключения типа PDOException
		при возникновении ошибок.

		PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC;
		Устанавливает режим выборки данных по умолчанию. Возвращая ассоциативные массивы, индексированные именами
		столбцов результирующего набора.

		PDO::MYSQL_ATTR_INIT_COMAND => 'SET NAMES utf8mb4';
		Устанавливает команду SQL, которая будет выполнена при установке соединения. В данном случаи, она
		устанавливает кодировку соединения на utf8mb4.
		// Устанавливаем кодировку дважды для обеспечения надежности. Если сервер базы данных игнорирует
		// некоторые настройки в источнике данных, то этот атрибут гарантирует установку этой кодировки.

	1.4) В блоке catch перехватываются исключения, которые могут возникнуть при установке соединения с БД. 
	Если произошла ошибка, скрипт выводит сообщение об ошибке на экран и завершает выполнение.
	
	1.5) Если соединение с БД успешно установлена и настроено, функция возвращает объект PDO, который
	представляет собой соединение с БД.

НЕОЧЕВИДНЫЕ МОМЕНТЫ:
1. Не понятно что будет если переопределить опции при создании объекта класса PDO внутри функции соединения с БД.
Т.к всё время происходит проверка на null. И при попытке перенастроить ее, он выбросит объект с предыдущим значением.

2. Зачем мы присваиваем статический переменной $dbh значение null? 

3. Почему в строке с источником данных именно такой порядок указания настроек? Что из себя представляют опции в этой строке?
Как они называются?

4. Непонятно как именно try catch определяет какие именно ошибки вылавливать. Это уже нужно лезть в классы.

5. Не могу указать тип возвращаемых значений внутри этой функции. Это вообще-то не влияет на работу самой функции, но
может быть есть способы явного указания значения возвращаемого типа?
--------------------------------------------------------------
-----------------------------------------------
3) Функция для получения массива данных всех пользоваетелей getUsers:
	3.1) Эта функция ожидает 2 аргумента, настроенный объект PDO и строка определяющая 
	порядок сортировки при выборке из БД.

	3.2) Формируется запрос для получения всех пользователей из таблицы users.
	Параметр order определяет порядок сортировки.

	3.3) После этот запрос подгатавливается к выполнению с помощью метода prepare,
	объекта PDO.

	3.4) Затем функция выполняет подготовленный запрос с использованием метода execute.

	3.5) После выполнения запроса вызывается метод fetchAll, чтобы получить все строки
	результата запроса. Этот результат сохраняется в переменной $result.
----------------------------------------------------
4) Функция для получения массива данных одного пользователя.
	4.1) Эта функция ожидает 2 аргумента, настроенный объект PDO и айди нужного
	пользователя.

	4.2) Формируется запрос на получение данных одного пользователя.
	Позиционный параметр id определяет айди нужного пользователя.

	4.3) После этот запрос подгатавливается к выполнению с помощью метода prepare,
	объекта PDO

	4.4) Затем функция выполняет подготовленный запрос с использованием метода execute,
	передавая туда значения для позиционного параметра id.

	4.5) После выполнения запроса вызывается метод fetch, чтобы получить строку
	из результирующего набора.
-------------------------------------------------------
5) Функция для добавления нового пользователя.
	5.1) Эта функция ожидает 2 аргумента, настроенный объект PDO и массив
	с данными будущего пользователя.

	5.2) Формируется запрос на добавление нового пользователя.
	Именованные параметры определяют данные будущего пользователя.

	5.3) После этот запрос подгатавливается к выполнению с помощью метода prepare,
	объекта PDO

	5.4) Затем данные пользователя экранируются с помощью пользовательской функции.

	5.5) Подготовленный запрос выполняется с использованием метода execute,
	передавая туда значения данных пользователя для именованных параметров.

	5.6) Потом мы получаем айди последней созданной записи.
--------------------------------------------------
6) Функция для проверки существования почты пользователя в базе данных.
	6.1) Эта функция ожидает 2 аргумента, настроенный объект PDO и 
	почту пользователя.

	6.2) В блоке try формируется запрос на получение только одного пользователя.
	Позиционный параметр определяет почту пользователя.

	6.3) После этого запрос подгатавливается к выполнению с помощью метода prepare,
	объекта PDO.

	6.4) Затем введенная почта экранируется с помощью метода quote.

	6.5) Подготовленный запрос выполняется с использованием метода execute,
	передавая туда значение почты для позиционного параметра.

	6.6) Потом мы получаем строку с данными пользователя, если совпадения найдены.
---------------------------------------
7) Функция для проверки существовния номера телефона пользователя в базе данных.
(Всё то же самое что и с почтой).
-------------------------------------------
8) Функция для обновления данных пользователя.
	8.1) Эта функция ожидает 3 аргумента, настроенный объект PDO,
	массив данных пользователя и айди пользователя.

	8.2) В блоке try формируется запрос для обновления данных пользователя.
	Именованные параметры определяют данные пользователя.

	8.3) Затем передаваемые данные экранируются с помозью пользовательской функции.

	8.4) Подготовленный запрос выполняется с использованием метеода execute,
	передвая туда значения для обновления данных пользователя.
-------------------------------------------
9) Функция для удаления пользователя и его данных.
	9.1) Эта фнукция ожидает 2 аргумента, настроенный объект PDO и
	айди пользователя для удаления.
	
	9.2) В блоке try формируется запрос для удаления данных пользователя.
	Позиционный параметр определяет айди нужного пользователя.

	9.3) Затем подготовленный запрос выполняется с использованием метода execute,
	передавая туда значение айди пользователя для позиционного параметра.






